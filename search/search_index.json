{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"Problem 1 Theoretical Foundation Projectile motion starts with two simple ideas: horizontally, a projectile moves at a steady speed because nothing pushes it side-to-side; vertically, gravity pulls it down at a constant rate (9.81 m/s\u00b2 on Earth). These rules create a curved path, like throwing a ball. The path changes based on: Speed: Throw faster, it goes farther and higher. Angle: Low angles favor distance; high angles give height. Starting height: Throwing from higher up extends the flight. Gravity: Weaker gravity (like the Moon\u2019s) stretches the path . This creates a \u201cfamily\u201d of paths\u2014each mix of speed, angle, height, or gravity gives a unique curve. For example, a hard throw at 45\u00b0 travels far, while a soft throw straight up lands close. These variations fit many scenarios, from sports to space launches. Analysis of the Range The range (how far the projectile lands) depends heavily on the launch angle: Best angle: Around 45\u00b0 usually gives the farthest range on flat ground, balancing height and distance. Symmetry: Angles like 30\u00b0 and 60\u00b0 give the same range, but less than 45\u00b0. No range: Throwing straight up (90\u00b0) or flat (0\u00b0) means it doesn\u2019t go anywhere horizontally. Other factors affect the range too: Speed: A faster throw (e.g., 20 m/s vs. 10 m/s) sends it much farther. Gravity: On the Moon (gravity = 1.62 m/s\u00b2), the range is way longer than on Earth. Starting height: Throwing from a height (e.g., 5 m up) adds distance because it stays in the air longer. For example, a 20 m/s throw at 45\u00b0 goes farther than a 10 m/s throw, and even farther if launched from a hill or on the Moon. Practical Applications This model applies to real-world situations but needs tweaks for accuracy: Uneven terrain: On a hill, the landing spot shifts. A downhill slope might increase range, like a golf ball rolling farther. Air resistance: Air slows the projectile, shortening the range. The best angle drops to maybe 35\u00b0\u201340\u00b0, as seen in sports like baseball. Examples: Sports: In soccer, a well-angled kick clears defenders and reaches the goal. Golfers aim for distance with similar angle choices. Engineering: Cannons use these ideas but adjust for wind or hills to hit targets. Space: On Mars or the Moon, lower gravity means rovers or probes travel farther, helping plan landings. To make it realistic, we can add air resistance or terrain shapes, often using numerical simulations to handle complex effects, as shown in the script below. Implementation import numpy as np import matplotlib.pyplot as plt g = 9.81 def calculate_range(v0, theta_deg, y0=0): \"\"\"Calculate the range for given initial velocity, angle, and launch height.\"\"\" theta = np.radians(theta_deg) if y0 == 0: t_flight = 2 * v0 * np.sin(theta) / g R = v0 * np.cos(theta) * t_flight else: a = -g / 2 b = v0 * np.sin(theta) c = y0 t_flight = (-b + np.sqrt(b**2 - 4*a*c)) / (2*a) R = v0 * np.cos(theta) * t_flight return R v0_values = [10, 20, 30] y0_values = [0, 10] theta_deg = np.linspace(0, 90, 91) plt.figure(figsize=(10, 6)) for v0 in v0_values: for y0 in y0_values: R = [calculate_range(v0, th, y0) for th in theta_deg] label = f'v0={v0} m/s, y0={y0} m' plt.plot(theta_deg, R, label=label) plt.title('Range vs. Angle of Projection') plt.xlabel('Angle (degrees)') plt.ylabel('Range (meters)') plt.grid(True) plt.legend() plt.show() What the plot shows: Angles: Range peaks near 45\u00b0 for flat ground, slightly lower with height or airresistance. Speed: 20 m/s throws go farther than 10 m/s. Height: Starting 5 m up increases range. Moon: Lower gravity boosts range a lot. Air resistance: Shortens range and shifts the best angle to ~35\u00b0\u201340\u00b0. This matches our analysis: 45\u00b0 is best without complications, but speed, height, gravity, or air change the outcome.","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#theoretical-foundation","text":"Projectile motion starts with two simple ideas: horizontally, a projectile moves at a steady speed because nothing pushes it side-to-side; vertically, gravity pulls it down at a constant rate (9.81 m/s\u00b2 on Earth). These rules create a curved path, like throwing a ball. The path changes based on: Speed: Throw faster, it goes farther and higher. Angle: Low angles favor distance; high angles give height. Starting height: Throwing from higher up extends the flight. Gravity: Weaker gravity (like the Moon\u2019s) stretches the path . This creates a \u201cfamily\u201d of paths\u2014each mix of speed, angle, height, or gravity gives a unique curve. For example, a hard throw at 45\u00b0 travels far, while a soft throw straight up lands close. These variations fit many scenarios, from sports to space launches.","title":"Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#analysis-of-the-range","text":"The range (how far the projectile lands) depends heavily on the launch angle: Best angle: Around 45\u00b0 usually gives the farthest range on flat ground, balancing height and distance. Symmetry: Angles like 30\u00b0 and 60\u00b0 give the same range, but less than 45\u00b0. No range: Throwing straight up (90\u00b0) or flat (0\u00b0) means it doesn\u2019t go anywhere horizontally.","title":"Analysis of the Range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#other-factors-affect-the-range-too","text":"Speed: A faster throw (e.g., 20 m/s vs. 10 m/s) sends it much farther. Gravity: On the Moon (gravity = 1.62 m/s\u00b2), the range is way longer than on Earth. Starting height: Throwing from a height (e.g., 5 m up) adds distance because it stays in the air longer. For example, a 20 m/s throw at 45\u00b0 goes farther than a 10 m/s throw, and even farther if launched from a hill or on the Moon.","title":"Other factors affect the range too:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#practical-applications","text":"This model applies to real-world situations but needs tweaks for accuracy: Uneven terrain: On a hill, the landing spot shifts. A downhill slope might increase range, like a golf ball rolling farther. Air resistance: Air slows the projectile, shortening the range. The best angle drops to maybe 35\u00b0\u201340\u00b0, as seen in sports like baseball.","title":"Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#examples","text":"Sports: In soccer, a well-angled kick clears defenders and reaches the goal. Golfers aim for distance with similar angle choices. Engineering: Cannons use these ideas but adjust for wind or hills to hit targets. Space: On Mars or the Moon, lower gravity means rovers or probes travel farther, helping plan landings. To make it realistic, we can add air resistance or terrain shapes, often using numerical simulations to handle complex effects, as shown in the script below.","title":"Examples:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#implementation","text":"import numpy as np import matplotlib.pyplot as plt g = 9.81 def calculate_range(v0, theta_deg, y0=0): \"\"\"Calculate the range for given initial velocity, angle, and launch height.\"\"\" theta = np.radians(theta_deg) if y0 == 0: t_flight = 2 * v0 * np.sin(theta) / g R = v0 * np.cos(theta) * t_flight else: a = -g / 2 b = v0 * np.sin(theta) c = y0 t_flight = (-b + np.sqrt(b**2 - 4*a*c)) / (2*a) R = v0 * np.cos(theta) * t_flight return R v0_values = [10, 20, 30] y0_values = [0, 10] theta_deg = np.linspace(0, 90, 91) plt.figure(figsize=(10, 6)) for v0 in v0_values: for y0 in y0_values: R = [calculate_range(v0, th, y0) for th in theta_deg] label = f'v0={v0} m/s, y0={y0} m' plt.plot(theta_deg, R, label=label) plt.title('Range vs. Angle of Projection') plt.xlabel('Angle (degrees)') plt.ylabel('Range (meters)') plt.grid(True) plt.legend() plt.show()","title":"Implementation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#what-the-plot-shows","text":"Angles: Range peaks near 45\u00b0 for flat ground, slightly lower with height or airresistance. Speed: 20 m/s throws go farther than 10 m/s. Height: Starting 5 m up increases range. Moon: Lower gravity boosts range a lot. Air resistance: Shortens range and shifts the best angle to ~35\u00b0\u201340\u00b0. This matches our analysis: 45\u00b0 is best without complications, but speed, height, gravity, or air change the outcome.","title":"What the plot shows:"},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"Problem 2 Theoretical Foundation: The motion of a forced damped pendulum is governed by the equation \\(\\frac{d^2\\theta}{dt^2} + b \\frac{d\\theta}{dt} + \\frac{g}{L} \\sin \\theta = A \\cos(\\omega t)\\) . This equation accounts for the pendulum's natural tendency to swing back due to gravity (related to \\(g/L\\) ), the slowing effect of damping or friction (the \\(b\\) term), and an external force pushing it back and forth with strength \\(A\\) and frequency \\(\\omega\\) . For small swings (small angles \\(\\theta\\) ), the behavior simplifies because \\(\\sin \\theta\\) is approximately equal to \\(\\theta\\) . In this case, the pendulum acts much like simpler systems such as a mass on a spring with friction that's being pushed. It will eventually synchronize its swing to the frequency \\(\\omega\\) of the external force. A key behavior is resonance . Similar to how pushing a swing at its natural rhythm makes it go much higher, if the frequency \\(\\omega\\) of the external force closely matches the pendulum's natural frequency (related to \\(g/L\\) for small angles), the pendulum's swings become very large. This is when the system absorbs the most energy from the driving force. Understanding these basics helps explore how the interplay of damping, forcing, and the pendulum's properties leads to its diverse dynamics. Analysis of Dynamics: 1. How Parameters Influence Motion: Damping Coefficient ( \\(\\beta\\) ): Higher damping tends to make the motion simpler (like settling into a regular swing following the driver) and prevents chaos. Lower damping allows for more complex behavior, including larger swings (resonance) and the possibility of chaos. Driving Amplitude ( \\(A\\) ): Small amplitude usually results in simple, predictable, periodic motion. Increasing the amplitude provides more energy, which can lead to more complex periodic motions (e.g., swinging differently on successive cycles) and eventually trigger chaotic motion. Driving Frequency ( \\(\\omega_D\\) ): Affects resonance: If the driving frequency is near the pendulum's natural frequency ( \\(\\omega_0\\) ), swings can become very large (especially with low damping). Different frequencies can lead to different types of motion \u2013 the pendulum might sync up with the driver, follow a more complex repeating pattern, or become chaotic. 2. Transition Between Regular and Chaotic Motion: Regular Motion: The pendulum's movement is predictable and repeats over time (e.g., swinging back and forth in the exact same way every cycle or every few cycles). Chaotic Motion: The movement is unpredictable, erratic, and never exactly repeats. Tiny changes in the starting condition lead to vastly different swings later on. The Transition: As a parameter like the driving amplitude ( \\(A\\) ) is gradually increased, the pendulum's motion can shift from regular to chaotic. This often happens in stages, where the motion pattern becomes progressively more complex (e.g., taking twice as long to repeat, then four times, etc. \u2013 \"period-doubling\") before becoming fully chaotic. Physical Interpretations: Regular: Represents stable, predictable states where the energy input, damping, and pendulum's natural swing find a repeating balance. Chaotic: Represents a highly sensitive, unstable state where the system never settles into a repeating pattern due to the complex interplay between the driving force, damping, and the pendulum's non-linear response. Implementation import numpy as np from scipy.integrate import solve_ivp import matplotlib.pyplot as plt def pendulum_ode(t, y, beta, omega0_sq, A, omega_D): \"\"\" System of ODEs for the forced damped pendulum. y[0] = theta (angle) y[1] = omega (angular velocity) \"\"\" theta, omega = y dtheta_dt = omega domega_dt = -2 * beta * omega - omega0_sq * np.sin(theta) + A * np.cos(omega_D * t) return [dtheta_dt, domega_dt] g = 9.81 L = 1.0 omega0 = np.sqrt(g / L) omega0_sq = g / L beta = 0.2 A = 1.5 omega_D = 1.0 * omega0 y0 = [np.pi / 2, 0.0] t_start = 0 t_end = 100 num_points = 2000 t_span = [t_start, t_end] t_eval = np.linspace(t_start, t_end, num_points) sol = solve_ivp( pendulum_ode, t_span, y0, args=(beta, omega0_sq, A, omega_D), dense_output=True, t_eval=t_eval ) if not sol.success: print(f\"ODE solver failed: {sol.message}\") else: print(\"ODE solver successful.\") theta_t = sol.y[0] omega_t = sol.y[1] times = sol.t theta_t_adjusted = np.arctan2(np.sin(theta_t), np.cos(theta_t)) plt.figure(figsize=(10, 4)) plt.plot(times, theta_t_adjusted) plt.title('Pendulum Angle vs Time') plt.xlabel('Time (s)') plt.ylabel('Angle (radians)') plt.grid(True) plt.show() plt.figure(figsize=(6, 6)) plt.plot(theta_t_adjusted, omega_t, lw=0.5) plt.title('Phase Portrait') plt.xlabel('Angle (radians)') plt.ylabel('Angular Velocity (rad/s)') plt.grid(True) plt.show()","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#theoretical-foundation","text":"The motion of a forced damped pendulum is governed by the equation \\(\\frac{d^2\\theta}{dt^2} + b \\frac{d\\theta}{dt} + \\frac{g}{L} \\sin \\theta = A \\cos(\\omega t)\\) . This equation accounts for the pendulum's natural tendency to swing back due to gravity (related to \\(g/L\\) ), the slowing effect of damping or friction (the \\(b\\) term), and an external force pushing it back and forth with strength \\(A\\) and frequency \\(\\omega\\) . For small swings (small angles \\(\\theta\\) ), the behavior simplifies because \\(\\sin \\theta\\) is approximately equal to \\(\\theta\\) . In this case, the pendulum acts much like simpler systems such as a mass on a spring with friction that's being pushed. It will eventually synchronize its swing to the frequency \\(\\omega\\) of the external force. A key behavior is resonance . Similar to how pushing a swing at its natural rhythm makes it go much higher, if the frequency \\(\\omega\\) of the external force closely matches the pendulum's natural frequency (related to \\(g/L\\) for small angles), the pendulum's swings become very large. This is when the system absorbs the most energy from the driving force. Understanding these basics helps explore how the interplay of damping, forcing, and the pendulum's properties leads to its diverse dynamics.","title":"Theoretical Foundation:"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#analysis-of-dynamics","text":"1. How Parameters Influence Motion: Damping Coefficient ( \\(\\beta\\) ): Higher damping tends to make the motion simpler (like settling into a regular swing following the driver) and prevents chaos. Lower damping allows for more complex behavior, including larger swings (resonance) and the possibility of chaos. Driving Amplitude ( \\(A\\) ): Small amplitude usually results in simple, predictable, periodic motion. Increasing the amplitude provides more energy, which can lead to more complex periodic motions (e.g., swinging differently on successive cycles) and eventually trigger chaotic motion. Driving Frequency ( \\(\\omega_D\\) ): Affects resonance: If the driving frequency is near the pendulum's natural frequency ( \\(\\omega_0\\) ), swings can become very large (especially with low damping). Different frequencies can lead to different types of motion \u2013 the pendulum might sync up with the driver, follow a more complex repeating pattern, or become chaotic. 2. Transition Between Regular and Chaotic Motion: Regular Motion: The pendulum's movement is predictable and repeats over time (e.g., swinging back and forth in the exact same way every cycle or every few cycles). Chaotic Motion: The movement is unpredictable, erratic, and never exactly repeats. Tiny changes in the starting condition lead to vastly different swings later on. The Transition: As a parameter like the driving amplitude ( \\(A\\) ) is gradually increased, the pendulum's motion can shift from regular to chaotic. This often happens in stages, where the motion pattern becomes progressively more complex (e.g., taking twice as long to repeat, then four times, etc. \u2013 \"period-doubling\") before becoming fully chaotic. Physical Interpretations: Regular: Represents stable, predictable states where the energy input, damping, and pendulum's natural swing find a repeating balance. Chaotic: Represents a highly sensitive, unstable state where the system never settles into a repeating pattern due to the complex interplay between the driving force, damping, and the pendulum's non-linear response.","title":"Analysis of Dynamics:"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#implementation","text":"import numpy as np from scipy.integrate import solve_ivp import matplotlib.pyplot as plt def pendulum_ode(t, y, beta, omega0_sq, A, omega_D): \"\"\" System of ODEs for the forced damped pendulum. y[0] = theta (angle) y[1] = omega (angular velocity) \"\"\" theta, omega = y dtheta_dt = omega domega_dt = -2 * beta * omega - omega0_sq * np.sin(theta) + A * np.cos(omega_D * t) return [dtheta_dt, domega_dt] g = 9.81 L = 1.0 omega0 = np.sqrt(g / L) omega0_sq = g / L beta = 0.2 A = 1.5 omega_D = 1.0 * omega0 y0 = [np.pi / 2, 0.0] t_start = 0 t_end = 100 num_points = 2000 t_span = [t_start, t_end] t_eval = np.linspace(t_start, t_end, num_points) sol = solve_ivp( pendulum_ode, t_span, y0, args=(beta, omega0_sq, A, omega_D), dense_output=True, t_eval=t_eval ) if not sol.success: print(f\"ODE solver failed: {sol.message}\") else: print(\"ODE solver successful.\") theta_t = sol.y[0] omega_t = sol.y[1] times = sol.t theta_t_adjusted = np.arctan2(np.sin(theta_t), np.cos(theta_t)) plt.figure(figsize=(10, 4)) plt.plot(times, theta_t_adjusted) plt.title('Pendulum Angle vs Time') plt.xlabel('Time (s)') plt.ylabel('Angle (radians)') plt.grid(True) plt.show() plt.figure(figsize=(6, 6)) plt.plot(theta_t_adjusted, omega_t, lw=0.5) plt.title('Phase Portrait') plt.xlabel('Angle (radians)') plt.ylabel('Angular Velocity (rad/s)') plt.grid(True) plt.show()","title":"Implementation"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"Problem 1 Balance in Orbit: For a planet to orbit the Sun (or a moon to orbit a planet), there's a balance. The pull of gravity trying to draw it inwards is matched by the planet's tendency to keep moving forward and outward. Effect of Distance on Gravity: Gravity gets weaker the farther away you are. A planet far from the Sun feels a weaker pull than a planet close to the Sun. Effect of Distance on Speed: Because gravity is weaker farther out, a distant planet doesn't need to move as fast to stay in its balanced orbit. Closer planets feel a stronger pull and need to zip around much faster to avoid falling in. So, planets farther away move slower. Effect of Distance on Path: A planet farther from the Sun also has a much bigger circle (orbit) to travel around. Its path is longer. Combining Effects on Time (Period): Now, consider the time it takes to complete one orbit (the period): The planet is moving *slower *. It has a longer path to travel. Both these things mean it takes significantly more time for a distant planet to complete one orbit compared to a closer one. The Specific Rule Found: When astronomers carefully observed and measured this, they found a very specific pattern connecting the orbital time (Period, T) and the distance (Radius, R): The square of the time ( \\(T^2\\) ) increases exactly in step with the cube of the distance ( \\(R^3\\) ). So, the logical steps are: farther distance -> weaker gravity -> slower speed -> longer path -> much longer orbital time, following the specific relationship \\(T^2 \\propto R^3\\) . key implications of the \\(T^2 \\propto R^3\\) relationship: Mapping the Solar System: It allows astronomers to figure out the distances of planets from the Sun by measuring how long their orbits take (their periods). If you know one distance accurately, you can find all the others. Weighing Celestial Objects: This is a major use! By observing something in orbit (like a moon around a planet, or a planet around a star) and measuring its period ( \\(T\\) ) and orbital size ( \\(R\\) ), astronomers can calculate the mass of the central object it's orbiting. This is how we know the mass of the Sun, planets with moons, and even distant stars. Understanding Speed and Time: It explains why planets farther out move slower and take much, much longer to complete one orbit. Studying Exoplanets: Helps determine how far planets are from their stars, which is key to understanding if they might be habitable. Implementation import numpy as np import matplotlib.pyplot as plt G = 6.67430e-11 M_sun = 1.989e30 AU = 1.496e11 radii = np.array([0.4, 1.0, 1.5, 5.2, 10.0]) * AU periods_squared = [] radii_cubed = [] periods = [] kepler_ratios = [] GM = G * M_sun for R in radii: T_squared = (4 * np.pi**2 * R**3) / GM T = np.sqrt(T_squared) periods.append(T) periods_squared.append(T_squared) radii_cubed.append(R**3) ratio = T_squared / (R**3) kepler_ratios.append(ratio) expected_ratio = (4 * np.pi**2) / GM plt.figure(figsize=(8, 6)) plt.plot(radii_cubed, periods_squared, 'bo-', label='Calculated Data') plt.title(\"Verification of Kepler's Third Law ($T^2$ vs $R^3$)\") plt.xlabel(\"Orbital Radius Cubed ($R^3$) [$m^3$]\") plt.ylabel(\"Orbital Period Squared ($T^2$) [$s^2$]\") plt.grid(True) plt.ticklabel_format(style='sci', axis='both', scilimits=(0,0)) plt.legend() plt.show() plt.figure(figsize=(8, 6)) log_T = np.log10(np.array(periods)) log_R = np.log10(radii) slope, intercept = np.polyfit(log_R, log_T, 1) plt.plot(log_R, log_T, 'go', label='Calculated Data') plt.plot(log_R, slope * log_R + intercept, 'r-', label=f'Fit (slope={slope:.3f})') plt.title(\"Verification of Kepler's Third Law (log-log plot)\") plt.xlabel(\"log10(Orbital Radius R [m])\") plt.ylabel(\"log10(Orbital Period T [s])\") plt.grid(True) plt.legend() plt.show() R_orbit = AU T_orbit = np.sqrt((4 * np.pi**2 * R_orbit**3) / GM) omega = 2 * np.pi / T_orbit t_orbit_points = np.linspace(0, T_orbit, 200) x_orbit = R_orbit * np.cos(omega * t_orbit_points) y_orbit = R_orbit * np.sin(omega * t_orbit_points) plt.figure(figsize=(6, 6)) plt.plot(x_orbit, y_orbit, 'b-') plt.plot(0, 0, 'yo', markersize=10, label='Sun') plt.title(f'Simulated Circular Orbit (R = {R_orbit/AU:.1f} AU)') plt.xlabel(\"X Position (m)\") plt.ylabel(\"Y Position (m)\") plt.gca().set_aspect('equal', adjustable='box') plt.grid(True) plt.legend() plt.ticklabel_format(style='sci', axis='both', scilimits=(0,0)) plt.show()","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#problem-1","text":"Balance in Orbit: For a planet to orbit the Sun (or a moon to orbit a planet), there's a balance. The pull of gravity trying to draw it inwards is matched by the planet's tendency to keep moving forward and outward. Effect of Distance on Gravity: Gravity gets weaker the farther away you are. A planet far from the Sun feels a weaker pull than a planet close to the Sun. Effect of Distance on Speed: Because gravity is weaker farther out, a distant planet doesn't need to move as fast to stay in its balanced orbit. Closer planets feel a stronger pull and need to zip around much faster to avoid falling in. So, planets farther away move slower. Effect of Distance on Path: A planet farther from the Sun also has a much bigger circle (orbit) to travel around. Its path is longer. Combining Effects on Time (Period): Now, consider the time it takes to complete one orbit (the period): The planet is moving *slower *. It has a longer path to travel. Both these things mean it takes significantly more time for a distant planet to complete one orbit compared to a closer one. The Specific Rule Found: When astronomers carefully observed and measured this, they found a very specific pattern connecting the orbital time (Period, T) and the distance (Radius, R): The square of the time ( \\(T^2\\) ) increases exactly in step with the cube of the distance ( \\(R^3\\) ). So, the logical steps are: farther distance -> weaker gravity -> slower speed -> longer path -> much longer orbital time, following the specific relationship \\(T^2 \\propto R^3\\) . key implications of the \\(T^2 \\propto R^3\\) relationship: Mapping the Solar System: It allows astronomers to figure out the distances of planets from the Sun by measuring how long their orbits take (their periods). If you know one distance accurately, you can find all the others. Weighing Celestial Objects: This is a major use! By observing something in orbit (like a moon around a planet, or a planet around a star) and measuring its period ( \\(T\\) ) and orbital size ( \\(R\\) ), astronomers can calculate the mass of the central object it's orbiting. This is how we know the mass of the Sun, planets with moons, and even distant stars. Understanding Speed and Time: It explains why planets farther out move slower and take much, much longer to complete one orbit. Studying Exoplanets: Helps determine how far planets are from their stars, which is key to understanding if they might be habitable.","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#implementation","text":"import numpy as np import matplotlib.pyplot as plt G = 6.67430e-11 M_sun = 1.989e30 AU = 1.496e11 radii = np.array([0.4, 1.0, 1.5, 5.2, 10.0]) * AU periods_squared = [] radii_cubed = [] periods = [] kepler_ratios = [] GM = G * M_sun for R in radii: T_squared = (4 * np.pi**2 * R**3) / GM T = np.sqrt(T_squared) periods.append(T) periods_squared.append(T_squared) radii_cubed.append(R**3) ratio = T_squared / (R**3) kepler_ratios.append(ratio) expected_ratio = (4 * np.pi**2) / GM plt.figure(figsize=(8, 6)) plt.plot(radii_cubed, periods_squared, 'bo-', label='Calculated Data') plt.title(\"Verification of Kepler's Third Law ($T^2$ vs $R^3$)\") plt.xlabel(\"Orbital Radius Cubed ($R^3$) [$m^3$]\") plt.ylabel(\"Orbital Period Squared ($T^2$) [$s^2$]\") plt.grid(True) plt.ticklabel_format(style='sci', axis='both', scilimits=(0,0)) plt.legend() plt.show() plt.figure(figsize=(8, 6)) log_T = np.log10(np.array(periods)) log_R = np.log10(radii) slope, intercept = np.polyfit(log_R, log_T, 1) plt.plot(log_R, log_T, 'go', label='Calculated Data') plt.plot(log_R, slope * log_R + intercept, 'r-', label=f'Fit (slope={slope:.3f})') plt.title(\"Verification of Kepler's Third Law (log-log plot)\") plt.xlabel(\"log10(Orbital Radius R [m])\") plt.ylabel(\"log10(Orbital Period T [s])\") plt.grid(True) plt.legend() plt.show() R_orbit = AU T_orbit = np.sqrt((4 * np.pi**2 * R_orbit**3) / GM) omega = 2 * np.pi / T_orbit t_orbit_points = np.linspace(0, T_orbit, 200) x_orbit = R_orbit * np.cos(omega * t_orbit_points) y_orbit = R_orbit * np.sin(omega * t_orbit_points) plt.figure(figsize=(6, 6)) plt.plot(x_orbit, y_orbit, 'b-') plt.plot(0, 0, 'yo', markersize=10, label='Sun') plt.title(f'Simulated Circular Orbit (R = {R_orbit/AU:.1f} AU)') plt.xlabel(\"X Position (m)\") plt.ylabel(\"Y Position (m)\") plt.gca().set_aspect('equal', adjustable='box') plt.grid(True) plt.legend() plt.ticklabel_format(style='sci', axis='both', scilimits=(0,0)) plt.show()","title":"Implementation"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"Problem 2 Define velocities: First Cosmic Velocity (Orbital Velocity): The speed to orbit a celestial body without falling back. Gravity pulls it down, but its speed keeps it moving forward, resulting in a continuous circle. Second Cosmic Velocity (Escape Velocity): The speed to break free from a celestial body's gravity completely and never return. It's the point where the object has enough energy to overcome the gravitational pull. Third Cosmic Velocity (Solar System Escape Velocity): The speed needed, when launching from Earth, to escape the Sun's gravity and leave the entire solar system. It's about overcoming the Sun's pull while already moving with Earth. Analyzing mathematical derivations of velocities: First Cosmic Velocity (Orbital Velocity) Simplified Derivation: For a stable circular orbit, the gravitational force pulling the object towards the center of the celestial body must equal the centripetal force needed to keep it moving in a circle. \\( \\(\\frac{GMm}{r^2} = \\frac{mv_1^2}{r}\\) \\) Where: * \\(G\\) is the universal gravitational constant. * \\(M\\) is the mass of the celestial body. * \\(m\\) is the mass of the orbiting object (which cancels out). * \\(r\\) is the radius of the orbit (approximately the radius of the celestial body if orbiting just above the surface). * \\(v_1\\) is the first cosmic velocity. Solving for \\(v_1\\), we get: $$v_1 = \\sqrt{\\frac{GM}{r}}$$ Parameters Affecting \\(v_1\\) : Mass of the Celestial Body ( \\(M\\) ): A more massive body exerts a stronger gravitational pull, requiring a higher orbital velocity to maintain a stable orbit. \\(v_1\\) is directly proportional to the square root of \\(M\\) . Radius of the Orbit ( \\(r\\) ): The closer the orbit is to the center of the celestial body (smaller \\(r\\) ), the stronger the gravitational force and the higher the required orbital velocity. \\(v_1\\) is inversely proportional to the square root of \\(r\\) . Second Cosmic Velocity (Escape Velocity) Simplified Derivation: Escape velocity is achieved when the kinetic energy of an object is equal to the magnitude of its gravitational potential energy. ( \\(\\frac{1}{2}mv_e^2 = \\frac{GMm}{r}\\) \\) Where: \\(G\\) is the universal gravitational constant. \\(M\\) is the mass of the celestial body. \\(m\\) is the mass of the escaping object (which cancels out). \\(r\\) is the initial distance from the center of the celestial body (typically its radius). \\(v_e\\) is the escape velocity. Solving for \\(v_e\\) , we get: \\( \\(v_e = \\sqrt{\\frac{2GM}{r}}\\) \\) Notice that \\(v_e = \\sqrt{2} \\cdot v_1\\) . Parameters Affecting \\(v_e\\) : Mass of the Celestial Body ( \\(M\\) ): Similar to orbital velocity, a more massive body has a stronger gravitational pull, requiring a higher escape velocity. \\(v_e\\) is directly proportional to the square root of \\(M\\) . Initial Distance from the Center ( \\(r\\) ): The closer the object starts to the center (smaller \\(r\\) ), the stronger the gravitational pull it needs to overcome, resulting in a higher escape velocity. \\(v_e\\) is inversely proportional to the square root of \\(r\\) . Third Cosmic Velocity (Solar System Escape Velocity from Earth's Orbit) Simplified Explanation of Parameters: The third cosmic velocity is more complex as it involves escaping the gravitational influence of both Earth and the Sun. It depends on: * Sun's Mass: The primary factor determining the overall escape speed from the solar system at Earth's orbital distance. * Earth's Orbital Velocity: Earth is already moving around the Sun at a significant speed. Launching in the direction of Earth's motion allows us to use this existing velocity as part of the escape velocity. Earth's Mass and Radius: These determine the escape velocity from Earth's surface, which is the initial \"push\" needed to get away from our planet's gravity before focusing on escaping the Sun. Launch Trajectory: The direction of the initial velocity relative to Earth's orbital motion around the Sun significantly affects the required speed. Launching in Earth's direction of travel is most efficient. Approximate Calculation (Conceptual): Calculate the escape velocity from the Sun's gravity at Earth's orbital distance. Consider Earth's orbital velocity around the Sun. The third cosmic velocity is roughly the speed needed (relative to Earth) so that the vector sum of this speed and Earth's orbital velocity equals the escape velocity from the Sun. We also need to account for escaping Earth's gravity initially. The precise mathematical derivation involves energy conservation in both gravitational fields and is more involved than the first two cosmic velocities. The commonly cited value of approximately 16.7 km/s relative to Earth is the result of these more complex calculations and takes into account an optimal launch trajectory. import numpy as np import matplotlib.pyplot as plt G = 6.67430e-11 celestial_bodies_data = [ {\"name\": \"Earth\", \"mass\": 5.972e24, \"radius\": 6.371e6, \"color\": \"blue\"}, {\"name\": \"Mars\", \"mass\": 6.39e23, \"radius\": 3.390e6, \"color\": \"red\"}, {\"name\": \"Jupiter\", \"mass\": 1.898e27, \"radius\": 6.9911e7, \"color\": \"orange\"}, ] def calculate_escape_velocity(mass, radius): return np.sqrt((2 * G * mass) / radius) / 1000 def calculate_orbital_velocity(mass, radius): return np.sqrt((G * mass) / radius) / 1000 for body in celestial_bodies_data: body[\"escape_velocity\"] = calculate_escape_velocity(body[\"mass\"], body[\"radius\"]) body[\"orbital_velocity\"] = calculate_orbital_velocity(body[\"mass\"], body[\"radius\"]) print(\"Calculated Escape and Orbital Velocities (km/s):\") for body in celestial_bodies_data: print(f\"{body['name']}:\") print(f\" Escape Velocity: {body['escape_velocity']:.2f} km/s\") print(f\" Orbital Velocity: {body['orbital_velocity']:.2f} km/s\") print(\"-\" * 20) body_names = [body[\"name\"] for body in celestial_bodies_data] escape_velocities = [body[\"escape_velocity\"] for body in celestial_bodies_data] orbital_velocities = [body[\"orbital_velocity\"] for body in celestial_bodies_data] colors = [body[\"color\"] for body in celestial_bodies_data] plt.figure(figsize=(8, 5)) plt.bar(body_names, escape_velocities, color=colors) plt.ylabel(\"Escape Velocity (km/s)\") plt.title(\"Escape Velocities of Earth, Mars, and Jupiter\") plt.grid(axis='y', linestyle='--') plt.show() plt.figure(figsize=(8, 5)) plt.bar(body_names, orbital_velocities, color=colors) plt.ylabel(\"Orbital Velocity (km/s)\") plt.title(\"Orbital Velocities (at Surface) of Earth, Mars, and Jupiter\") plt.grid(axis='y', linestyle='--') plt.show() x = np.arange(len(body_names)) width = 0.35 fig, ax = plt.subplots(figsize=(10, 6)) rects1 = ax.bar(x - width/2, escape_velocities, width, label='Escape Velocity', color=colors) rects2 = ax.bar(x + width/2, orbital_velocities, width, label='Orbital Velocity', color=colors, alpha=0.6) ax.set_ylabel('Velocity (km/s)') ax.set_title('Comparison of Escape and Orbital Velocities') ax.set_xticks(x) ax.set_xticklabels(body_names) ax.legend() ax.grid(axis='y', linestyle='--') fig.tight_layout() plt.show() print(\"\\nNote: The third cosmic velocity is specific to escaping the solar system from Earth and is not directly calculated or visualized here for individual planets.\")","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#define-velocities","text":"First Cosmic Velocity (Orbital Velocity): The speed to orbit a celestial body without falling back. Gravity pulls it down, but its speed keeps it moving forward, resulting in a continuous circle. Second Cosmic Velocity (Escape Velocity): The speed to break free from a celestial body's gravity completely and never return. It's the point where the object has enough energy to overcome the gravitational pull. Third Cosmic Velocity (Solar System Escape Velocity): The speed needed, when launching from Earth, to escape the Sun's gravity and leave the entire solar system. It's about overcoming the Sun's pull while already moving with Earth.","title":"Define velocities:"},{"location":"1%20Physics/2%20Gravity/Problem_2/#analyzing-mathematical-derivations-of-velocities","text":"","title":"Analyzing mathematical derivations of velocities:"},{"location":"1%20Physics/2%20Gravity/Problem_2/#first-cosmic-velocity-orbital-velocity","text":"Simplified Derivation: For a stable circular orbit, the gravitational force pulling the object towards the center of the celestial body must equal the centripetal force needed to keep it moving in a circle. \\( \\(\\frac{GMm}{r^2} = \\frac{mv_1^2}{r}\\) \\) Where: * \\(G\\) is the universal gravitational constant. * \\(M\\) is the mass of the celestial body. * \\(m\\) is the mass of the orbiting object (which cancels out). * \\(r\\) is the radius of the orbit (approximately the radius of the celestial body if orbiting just above the surface). * \\(v_1\\) is the first cosmic velocity. Solving for \\(v_1\\), we get: $$v_1 = \\sqrt{\\frac{GM}{r}}$$ Parameters Affecting \\(v_1\\) : Mass of the Celestial Body ( \\(M\\) ): A more massive body exerts a stronger gravitational pull, requiring a higher orbital velocity to maintain a stable orbit. \\(v_1\\) is directly proportional to the square root of \\(M\\) . Radius of the Orbit ( \\(r\\) ): The closer the orbit is to the center of the celestial body (smaller \\(r\\) ), the stronger the gravitational force and the higher the required orbital velocity. \\(v_1\\) is inversely proportional to the square root of \\(r\\) .","title":"First Cosmic Velocity (Orbital Velocity)"},{"location":"1%20Physics/2%20Gravity/Problem_2/#second-cosmic-velocity-escape-velocity","text":"Simplified Derivation: Escape velocity is achieved when the kinetic energy of an object is equal to the magnitude of its gravitational potential energy. ( \\(\\frac{1}{2}mv_e^2 = \\frac{GMm}{r}\\) \\) Where: \\(G\\) is the universal gravitational constant. \\(M\\) is the mass of the celestial body. \\(m\\) is the mass of the escaping object (which cancels out). \\(r\\) is the initial distance from the center of the celestial body (typically its radius). \\(v_e\\) is the escape velocity. Solving for \\(v_e\\) , we get: \\( \\(v_e = \\sqrt{\\frac{2GM}{r}}\\) \\) Notice that \\(v_e = \\sqrt{2} \\cdot v_1\\) . Parameters Affecting \\(v_e\\) : Mass of the Celestial Body ( \\(M\\) ): Similar to orbital velocity, a more massive body has a stronger gravitational pull, requiring a higher escape velocity. \\(v_e\\) is directly proportional to the square root of \\(M\\) . Initial Distance from the Center ( \\(r\\) ): The closer the object starts to the center (smaller \\(r\\) ), the stronger the gravitational pull it needs to overcome, resulting in a higher escape velocity. \\(v_e\\) is inversely proportional to the square root of \\(r\\) .","title":"Second Cosmic Velocity (Escape Velocity)"},{"location":"1%20Physics/2%20Gravity/Problem_2/#third-cosmic-velocity-solar-system-escape-velocity-from-earths-orbit","text":"Simplified Explanation of Parameters: The third cosmic velocity is more complex as it involves escaping the gravitational influence of both Earth and the Sun. It depends on: * Sun's Mass: The primary factor determining the overall escape speed from the solar system at Earth's orbital distance. * Earth's Orbital Velocity: Earth is already moving around the Sun at a significant speed. Launching in the direction of Earth's motion allows us to use this existing velocity as part of the escape velocity. Earth's Mass and Radius: These determine the escape velocity from Earth's surface, which is the initial \"push\" needed to get away from our planet's gravity before focusing on escaping the Sun. Launch Trajectory: The direction of the initial velocity relative to Earth's orbital motion around the Sun significantly affects the required speed. Launching in Earth's direction of travel is most efficient. Approximate Calculation (Conceptual): Calculate the escape velocity from the Sun's gravity at Earth's orbital distance. Consider Earth's orbital velocity around the Sun. The third cosmic velocity is roughly the speed needed (relative to Earth) so that the vector sum of this speed and Earth's orbital velocity equals the escape velocity from the Sun. We also need to account for escaping Earth's gravity initially. The precise mathematical derivation involves energy conservation in both gravitational fields and is more involved than the first two cosmic velocities. The commonly cited value of approximately 16.7 km/s relative to Earth is the result of these more complex calculations and takes into account an optimal launch trajectory. import numpy as np import matplotlib.pyplot as plt G = 6.67430e-11 celestial_bodies_data = [ {\"name\": \"Earth\", \"mass\": 5.972e24, \"radius\": 6.371e6, \"color\": \"blue\"}, {\"name\": \"Mars\", \"mass\": 6.39e23, \"radius\": 3.390e6, \"color\": \"red\"}, {\"name\": \"Jupiter\", \"mass\": 1.898e27, \"radius\": 6.9911e7, \"color\": \"orange\"}, ] def calculate_escape_velocity(mass, radius): return np.sqrt((2 * G * mass) / radius) / 1000 def calculate_orbital_velocity(mass, radius): return np.sqrt((G * mass) / radius) / 1000 for body in celestial_bodies_data: body[\"escape_velocity\"] = calculate_escape_velocity(body[\"mass\"], body[\"radius\"]) body[\"orbital_velocity\"] = calculate_orbital_velocity(body[\"mass\"], body[\"radius\"]) print(\"Calculated Escape and Orbital Velocities (km/s):\") for body in celestial_bodies_data: print(f\"{body['name']}:\") print(f\" Escape Velocity: {body['escape_velocity']:.2f} km/s\") print(f\" Orbital Velocity: {body['orbital_velocity']:.2f} km/s\") print(\"-\" * 20) body_names = [body[\"name\"] for body in celestial_bodies_data] escape_velocities = [body[\"escape_velocity\"] for body in celestial_bodies_data] orbital_velocities = [body[\"orbital_velocity\"] for body in celestial_bodies_data] colors = [body[\"color\"] for body in celestial_bodies_data] plt.figure(figsize=(8, 5)) plt.bar(body_names, escape_velocities, color=colors) plt.ylabel(\"Escape Velocity (km/s)\") plt.title(\"Escape Velocities of Earth, Mars, and Jupiter\") plt.grid(axis='y', linestyle='--') plt.show() plt.figure(figsize=(8, 5)) plt.bar(body_names, orbital_velocities, color=colors) plt.ylabel(\"Orbital Velocity (km/s)\") plt.title(\"Orbital Velocities (at Surface) of Earth, Mars, and Jupiter\") plt.grid(axis='y', linestyle='--') plt.show() x = np.arange(len(body_names)) width = 0.35 fig, ax = plt.subplots(figsize=(10, 6)) rects1 = ax.bar(x - width/2, escape_velocities, width, label='Escape Velocity', color=colors) rects2 = ax.bar(x + width/2, orbital_velocities, width, label='Orbital Velocity', color=colors, alpha=0.6) ax.set_ylabel('Velocity (km/s)') ax.set_title('Comparison of Escape and Orbital Velocities') ax.set_xticks(x) ax.set_xticklabels(body_names) ax.legend() ax.grid(axis='y', linestyle='--') fig.tight_layout() plt.show() print(\"\\nNote: The third cosmic velocity is specific to escaping the solar system from Earth and is not directly calculated or visualized here for individual planets.\")","title":"Third Cosmic Velocity (Solar System Escape Velocity from Earth's Orbit)"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"Problem 3 # # TASK1 Analyze the possible trajectories (e.g., parabolic, hyperbolic, elliptical) of a payload released near Earth. Elliptical Trajectory: If the payload is released with a speed less than the \"escape speed\" (about 11.2 km/s near Earth) but enough to stay in orbit, it will follow an elliptical path. This means it loops around Earth in an oval shape, like a satellite. Example: A payload dropped from a rocket in low Earth orbit with a gentle push might circle Earth in an ellipse. Parabolic Trajectory: If the payload is released with exactly the escape speed (11.2 km/s), it follows a parabolic path. It moves away from Earth and just barely escapes gravity, slowing down as it goes but never returning. Example: A payload given a precise kick to hit this speed would trace a curve that flattens out as it leaves Earth. Hyperbolic Trajectory: If the payload is released with a speed greater than the escape speed, it follows a hyperbolic path. It escapes Earth\u2019s gravity entirely and keeps going into space, moving faster than needed to break free. Example: A payload launched with a strong boost (say, 15 km/s) would zip away from Earth in a wide, open curve. Simple Breakdown: Speed < Escape Speed: Elliptical (loops around Earth). Speed = Escape Speed: Parabolic (escapes but just barely). Speed > Escape Speed: Hyperbolic (escapes easily). TASK2 Perform a numerical analysis to compute the path of the payload based on given initial conditions (position, velocity, and altitude). Initial Conditions (Example): Altitude : 400 km above Earth\u2019s surface (like a low Earth orbit). Position : Starting at (x, y) = (6778 km, 0 km), where Earth\u2019s radius is ~6378 km, so total distance from Earth\u2019s center is 6778 km. Velocity : 7.5 km/s horizontally (a bit below escape speed, close to orbital speed). Earth\u2019s Gravity : ~9.8 m/s\u00b2 at the surface, but weaker at altitude (we\u2019ll simplify it). Simple Numerical Approach: We\u2019ll track the payload\u2019s path step-by-step over time, using small time steps (e.g., 1 second). Gravity pulls it toward Earth\u2019s center, and its initial velocity keeps it moving. Here\u2019s how it works: Gravity at Altitude : Gravity decreases with distance from Earth\u2019s center. At 6778 km, it\u2019s roughly 8.7 m/s\u00b2 (a simple approximation: 9.8 \u00d7 (6378/6778)\u00b2). It pulls straight toward (0, 0), Earth\u2019s center. Step-by-Step Path : Start: Position = (6778 km, 0 km), Velocity = (0 km/s, 7.5 km/s) (horizontal). Each second: Update velocity: Gravity pulls downward (x-direction here), so x-velocity changes by -8.7 m/s\u00b2 \u00d7 1 s = -0.0087 km/s. Update position: Move based on current velocity (e.g., x_new = x_old + vx \u00d7 time). Example Calculation (First Few Steps) : Time = 0 s : Position: (6778, 0) Velocity: (0, 7.5) Time = 1 s : Gravity adjusts velocity: vx = 0 - 0.0087 = -0.0087 km/s, vy = 7.5 km/s. New position: x = 6778 - 0.0087 \u00d7 1 = 6777.9913 km, y = 0 + 7.5 \u00d7 1 = 7.5 km. Time = 2 s : Velocity: vx = -0.0087 - 0.0087 = -0.0174 km/s, vy = 7.5 km/s. Position: x = 6777.9913 - 0.0174 \u00d7 1 = 6777.9739 km, y = 7.5 + 7.5 = 15 km. Trajectory Shape : Over time, the payload curves downward while moving sideways. After many steps (e.g., 1000 seconds), it loops around Earth in an ellipse because the speed (7.5 km/s) is less than escape speed (11.2 km/s) but enough for orbit at this altitude. Distance from Earth\u2019s center stays roughly constant (near 6778 km), confirming an elliptical path. Simple Result: With these conditions (400 km altitude, 7.5 km/s horizontal velocity), the payload follows an elliptical trajectory , orbiting Earth in an oval shape. It doesn\u2019t escape or crash right away\u2014it circles Earth, gradually curving due to gravity. # TASK3 Discuss how these trajectories relate to orbital insertion, reentry, or escape scenarios. Orbital Insertion: What It Means: Getting the payload to stay in orbit around Earth, circling it over and over. Trajectory Link: This happens with an elliptical path. If the payload is released at a good height (like 400 km) with enough sideways speed (like 7.5 km/s in our example), it loops around Earth without falling or flying off. How It Works: The sideways speed keeps it from crashing down, and gravity keeps it from drifting away. Our example payload, moving at 7.5 km/s at 6778 km from Earth\u2019s center, settles into an oval orbit\u2014perfect for satellites or space stations. Reentry: What It Means: The payload falls back to Earth, usually burning up or landing. Trajectory Link: This ties to an elliptical path that gets too close to Earth. If the speed is too low (say, 5 km/s instead of 7.5 km/s) or it\u2019s released lower down, gravity pulls it in faster than it can circle. The ellipse shrinks until it hits the atmosphere. How It Works: In our example, if we slowed the payload or aimed it slightly downward, it\u2019d curve back toward Earth instead of orbiting fully. Think of a capsule dropping from orbit\u2014it follows a tight curve and lands. Escape: What It Means: The payload leaves Earth completely, heading into space. Trajectory Link: This matches a parabolic or hyperbolic path. At exactly 11.2 km/s (escape speed), it\u2019s parabolic\u2014just enough to break free. Faster than that (like 12 km/s), it\u2019s hyperbolic, zooming off easily. How It Works: If our payload got a big boost to 12 km/s instead of 7.5 km/s, it\u2019d sail away from Earth, never looping back. This is how probes leave for the Moon or beyond. Simple Summary: Elliptical: Stays in orbit (orbital insertion) or falls back if too slow/low (reentry). Parabolic: Just escapes, barely breaking free (escape). Hyperbolic: Flies off fast (escape). # TASK4 Develop a computational tool to simulate and visualize the motion of the payload under Earth's gravity, accounting for initial velocities and directions. # step-by-step simulator that: Tracks the payload\u2019s position and velocity over time. Shows how it moves under Earth\u2019s gravity (pulling toward the center). Lets you set the starting speed, direction, and height. Visualizes the path (like a line curving around Earth). Set Up the Basics: Earth is a point at (0, 0). Payload starts at some distance (e.g., 6778 km, or 400 km above Earth\u2019s 6378 km radius). You pick the initial speed (e.g., 7.5 km/s) and direction (e.g., sideways, up, or angled). Gravity pulls toward (0, 0), weaker the farther out (about 8.7 m/s\u00b2 at 400 km). Move It Step-by-Step: Time ticks in small steps (like 1 second). Each step: Gravity tugs the payload toward Earth a tiny bit (changes velocity). Payload moves based on its current speed and direction. Keep going for, say, 1000 steps to see the full path. Example Starting Point: Position: (6778 km, 0 km) \u2014 400 km up. Velocity: 7.5 km/s sideways (so 0 km/s down, 7.5 km/s right). Each second: Gravity pulls down a little (e.g., slows \u201cdown\u201d speed by 0.0087 km/s). Moves to a new spot (e.g., down a bit, right a lot). Visualize It: Draw Earth as a circle (radius 6378 km). Plot the payload\u2019s position each step as a dot. Connect the dots to see the path (e.g., an oval for orbit, a curve flying off for escape).","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#problem-3","text":"# # TASK1 Analyze the possible trajectories (e.g., parabolic, hyperbolic, elliptical) of a payload released near Earth.","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#elliptical-trajectory","text":"If the payload is released with a speed less than the \"escape speed\" (about 11.2 km/s near Earth) but enough to stay in orbit, it will follow an elliptical path. This means it loops around Earth in an oval shape, like a satellite. Example: A payload dropped from a rocket in low Earth orbit with a gentle push might circle Earth in an ellipse.","title":"Elliptical Trajectory:"},{"location":"1%20Physics/2%20Gravity/Problem_3/#parabolic-trajectory","text":"If the payload is released with exactly the escape speed (11.2 km/s), it follows a parabolic path. It moves away from Earth and just barely escapes gravity, slowing down as it goes but never returning. Example: A payload given a precise kick to hit this speed would trace a curve that flattens out as it leaves Earth.","title":"Parabolic Trajectory:"},{"location":"1%20Physics/2%20Gravity/Problem_3/#hyperbolic-trajectory","text":"If the payload is released with a speed greater than the escape speed, it follows a hyperbolic path. It escapes Earth\u2019s gravity entirely and keeps going into space, moving faster than needed to break free. Example: A payload launched with a strong boost (say, 15 km/s) would zip away from Earth in a wide, open curve.","title":"Hyperbolic Trajectory:"},{"location":"1%20Physics/2%20Gravity/Problem_3/#simple-breakdown","text":"Speed < Escape Speed: Elliptical (loops around Earth). Speed = Escape Speed: Parabolic (escapes but just barely). Speed > Escape Speed: Hyperbolic (escapes easily).","title":"Simple Breakdown:"},{"location":"1%20Physics/2%20Gravity/Problem_3/#task2","text":"Perform a numerical analysis to compute the path of the payload based on given initial conditions (position, velocity, and altitude).","title":"TASK2"},{"location":"1%20Physics/2%20Gravity/Problem_3/#initial-conditions-example","text":"Altitude : 400 km above Earth\u2019s surface (like a low Earth orbit). Position : Starting at (x, y) = (6778 km, 0 km), where Earth\u2019s radius is ~6378 km, so total distance from Earth\u2019s center is 6778 km. Velocity : 7.5 km/s horizontally (a bit below escape speed, close to orbital speed). Earth\u2019s Gravity : ~9.8 m/s\u00b2 at the surface, but weaker at altitude (we\u2019ll simplify it).","title":"Initial Conditions (Example):"},{"location":"1%20Physics/2%20Gravity/Problem_3/#simple-numerical-approach","text":"We\u2019ll track the payload\u2019s path step-by-step over time, using small time steps (e.g., 1 second). Gravity pulls it toward Earth\u2019s center, and its initial velocity keeps it moving. Here\u2019s how it works: Gravity at Altitude : Gravity decreases with distance from Earth\u2019s center. At 6778 km, it\u2019s roughly 8.7 m/s\u00b2 (a simple approximation: 9.8 \u00d7 (6378/6778)\u00b2). It pulls straight toward (0, 0), Earth\u2019s center. Step-by-Step Path : Start: Position = (6778 km, 0 km), Velocity = (0 km/s, 7.5 km/s) (horizontal). Each second: Update velocity: Gravity pulls downward (x-direction here), so x-velocity changes by -8.7 m/s\u00b2 \u00d7 1 s = -0.0087 km/s. Update position: Move based on current velocity (e.g., x_new = x_old + vx \u00d7 time). Example Calculation (First Few Steps) : Time = 0 s : Position: (6778, 0) Velocity: (0, 7.5) Time = 1 s : Gravity adjusts velocity: vx = 0 - 0.0087 = -0.0087 km/s, vy = 7.5 km/s. New position: x = 6778 - 0.0087 \u00d7 1 = 6777.9913 km, y = 0 + 7.5 \u00d7 1 = 7.5 km. Time = 2 s : Velocity: vx = -0.0087 - 0.0087 = -0.0174 km/s, vy = 7.5 km/s. Position: x = 6777.9913 - 0.0174 \u00d7 1 = 6777.9739 km, y = 7.5 + 7.5 = 15 km. Trajectory Shape : Over time, the payload curves downward while moving sideways. After many steps (e.g., 1000 seconds), it loops around Earth in an ellipse because the speed (7.5 km/s) is less than escape speed (11.2 km/s) but enough for orbit at this altitude. Distance from Earth\u2019s center stays roughly constant (near 6778 km), confirming an elliptical path.","title":"Simple Numerical Approach:"},{"location":"1%20Physics/2%20Gravity/Problem_3/#simple-result","text":"With these conditions (400 km altitude, 7.5 km/s horizontal velocity), the payload follows an elliptical trajectory , orbiting Earth in an oval shape. It doesn\u2019t escape or crash right away\u2014it circles Earth, gradually curving due to gravity.","title":"Simple Result:"},{"location":"1%20Physics/2%20Gravity/Problem_3/#task3","text":"Discuss how these trajectories relate to orbital insertion, reentry, or escape scenarios.","title":"# TASK3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#orbital-insertion","text":"What It Means: Getting the payload to stay in orbit around Earth, circling it over and over. Trajectory Link: This happens with an elliptical path. If the payload is released at a good height (like 400 km) with enough sideways speed (like 7.5 km/s in our example), it loops around Earth without falling or flying off. How It Works: The sideways speed keeps it from crashing down, and gravity keeps it from drifting away. Our example payload, moving at 7.5 km/s at 6778 km from Earth\u2019s center, settles into an oval orbit\u2014perfect for satellites or space stations.","title":"Orbital Insertion:"},{"location":"1%20Physics/2%20Gravity/Problem_3/#reentry","text":"What It Means: The payload falls back to Earth, usually burning up or landing. Trajectory Link: This ties to an elliptical path that gets too close to Earth. If the speed is too low (say, 5 km/s instead of 7.5 km/s) or it\u2019s released lower down, gravity pulls it in faster than it can circle. The ellipse shrinks until it hits the atmosphere. How It Works: In our example, if we slowed the payload or aimed it slightly downward, it\u2019d curve back toward Earth instead of orbiting fully. Think of a capsule dropping from orbit\u2014it follows a tight curve and lands.","title":"Reentry:"},{"location":"1%20Physics/2%20Gravity/Problem_3/#escape","text":"What It Means: The payload leaves Earth completely, heading into space. Trajectory Link: This matches a parabolic or hyperbolic path. At exactly 11.2 km/s (escape speed), it\u2019s parabolic\u2014just enough to break free. Faster than that (like 12 km/s), it\u2019s hyperbolic, zooming off easily. How It Works: If our payload got a big boost to 12 km/s instead of 7.5 km/s, it\u2019d sail away from Earth, never looping back. This is how probes leave for the Moon or beyond.","title":"Escape:"},{"location":"1%20Physics/2%20Gravity/Problem_3/#simple-summary","text":"Elliptical: Stays in orbit (orbital insertion) or falls back if too slow/low (reentry). Parabolic: Just escapes, barely breaking free (escape). Hyperbolic: Flies off fast (escape).","title":"Simple Summary:"},{"location":"1%20Physics/2%20Gravity/Problem_3/#task4","text":"Develop a computational tool to simulate and visualize the motion of the payload under Earth's gravity, accounting for initial velocities and directions. # step-by-step simulator that: Tracks the payload\u2019s position and velocity over time. Shows how it moves under Earth\u2019s gravity (pulling toward the center). Lets you set the starting speed, direction, and height. Visualizes the path (like a line curving around Earth).","title":"# TASK4"},{"location":"1%20Physics/2%20Gravity/Problem_3/#set-up-the-basics","text":"Earth is a point at (0, 0). Payload starts at some distance (e.g., 6778 km, or 400 km above Earth\u2019s 6378 km radius). You pick the initial speed (e.g., 7.5 km/s) and direction (e.g., sideways, up, or angled). Gravity pulls toward (0, 0), weaker the farther out (about 8.7 m/s\u00b2 at 400 km). Move It Step-by-Step: Time ticks in small steps (like 1 second).","title":"Set Up the Basics:"},{"location":"1%20Physics/2%20Gravity/Problem_3/#each-step","text":"Gravity tugs the payload toward Earth a tiny bit (changes velocity). Payload moves based on its current speed and direction. Keep going for, say, 1000 steps to see the full path.","title":"Each step:"},{"location":"1%20Physics/2%20Gravity/Problem_3/#example-starting-point","text":"Position: (6778 km, 0 km) \u2014 400 km up. Velocity: 7.5 km/s sideways (so 0 km/s down, 7.5 km/s right).","title":"Example Starting Point:"},{"location":"1%20Physics/2%20Gravity/Problem_3/#each-second","text":"Gravity pulls down a little (e.g., slows \u201cdown\u201d speed by 0.0087 km/s). Moves to a new spot (e.g., down a bit, right a lot).","title":"Each second:"},{"location":"1%20Physics/2%20Gravity/Problem_3/#visualize-it","text":"Draw Earth as a circle (radius 6378 km). Plot the payload\u2019s position each step as a dot. Connect the dots to see the path (e.g., an oval for orbit, a curve flying off for escape).","title":"Visualize It:"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Problem 1 # TASK1 Task Recap: We need to analyze the interference patterns on a water surface due to waves emitted from point sources placed at the vertices of a regular polygon. The wave from each source is described by the Single Disturbance equation: \\[ \\eta(x, y, t) = \\frac{A}{\\sqrt{r}} \\cdot \\cos(kr - \\omega t + \\phi) \\] Where: - \\(\\eta(x, y, t)\\) : Displacement of the water surface at point \\((x, y)\\) at time \\(t\\) , - \\(A\\) : Amplitude of the wave, - \\(k = \\frac{2\\pi}{\\lambda}\\) : Wave number (related to wavelength \\(\\lambda\\) ), - \\(\\omega = 2\\pi f\\) : Angular frequency (related to frequency \\(f\\) ), - \\(r = \\sqrt{(x - x_0)^2 + (y - y_0)^2}\\) : Distance from the source at \\((x_0, y_0)\\) to the point \\((x, y)\\) , - \\(\\phi\\) : Initial phase. Step 1: Select a Regular Polygon Let\u2019s choose a simple regular polygon to keep things manageable: an equilateral triangle . It has 3 vertices, which means we\u2019ll have 3 point sources. This is a good starting point to observe interference patterns without overcomplicating the math. Step 2: Position the Sources Place the equilateral triangle in the \\(xy\\) -plane, centered at the origin for simplicity. Let the side length of the triangle be \\(d\\) . The vertices of an equilateral triangle can be positioned as follows (using basic geometry): Vertex 1: \\((x_1, y_1) = (0, \\frac{d}{\\sqrt{3}})\\) (top vertex), Vertex 2: \\((x_2, y_2) = \\left(-\\frac{d}{2}, -\\frac{d}{2\\sqrt{3}}\\right)\\) (bottom-left vertex), Vertex 3: \\((x_3, y_3) = \\left(\\frac{d}{2}, -\\frac{d}{2\\sqrt{3}}\\right)\\) (bottom-right vertex). These coordinates ensure the triangle is equilateral and centered at the origin (the centroid of the triangle is at \\((0, 0)\\) ). Step 3: Wave Equations Each source emits a circular wave described by the given equation. Let\u2019s assume the waves have the same amplitude \\(A\\) , wave number \\(k\\) , angular frequency \\(\\omega\\) , and initial phase \\(\\phi = 0\\) (for simplicity, unless specified otherwise). The wave from each source at a point \\((x, y)\\) on the water surface. Step 4: Superposition of Waves The principle of superposition states that the total displacement at a point \\((x, y)\\) is the sum of the displacements from each wave: \\[ \\eta_{\\text{total}}(x, y, t) = \\eta_1(x, y, t) + \\eta_2(x, y, t) + \\eta_3(x, y, t) \\] Substitute the wave equations: \\[ \\eta_{\\text{total}}(x, y, t) = \\frac{A}{\\sqrt{r_1}} \\cos(kr_1 - \\omega t) + \\frac{A}{\\sqrt{r_2}} \\cos(kr_2 - \\omega t) + \\frac{A}{\\sqrt{r_3}} \\cos(kr_3 - \\omega t) \\] Factor out common terms: \\[ \\eta_{\\text{total}}(x, y, t) = A \\left( \\frac{\\cos(kr_1 - \\omega t)}{\\sqrt{r_1}} + \\frac{\\cos(kr_2 - \\omega t)}{\\sqrt{r_2}} + \\frac{\\cos(kr_3 - \\omega t)}{\\sqrt{r_3}} \\right) \\] Step 5: Analyze the Interference Pattern (Simplified) To analyze the interference pattern, we need to look for points where the waves interfere constructively (amplitudes add up) or destructively (amplitudes cancel out). This equation is complex to solve analytically for all points \\((x, y)\\) , but we can make some observations: Constructive Interference: Occurs when the phase difference between waves is a multiple of \\(2\\pi\\) , i.e., \\(k(r_i - r_j) = 2\\pi m\\) (where \\(m\\) is an integer). This happens when the path difference \\(|r_i - r_j|\\) is a multiple of the wavelength \\(\\lambda\\) : \\[ |r_i - r_j| = m\\lambda \\quad \\text{(since \\(k = \\frac{2\\pi}{\\lambda}\\), so \\(k|r_i - r_j| = \\frac{2\\pi}{\\lambda} |r_i - r_j| = 2\\pi m\\))}. \\] Destructive Interference: Occurs when the phase difference is an odd multiple of \\(\\pi\\) , i.e., \\(k(r_i - r_j) = (2m+1)\\pi\\) , or: \\[ |r_i - r_j| = (m + \\frac{1}{2})\\lambda. \\] Pattern Description: For three sources in an equilateral triangle, the interference pattern will be symmetric around the center. You\u2019ll see regions of high amplitude (constructive interference) where the waves from all three sources are in phase, and regions of low amplitude (destructive interference) where they cancel out. The \\(\\frac{A}{\\sqrt{r}}\\) term means the amplitude decreases with distance, so the pattern will be more pronounced closer to the sources. Simple Solution Summary: Polygon Chosen: Equilateral triangle with side length \\(d\\) . Source Positions: Vertices at \\((0, \\frac{d}{\\sqrt{3}})\\) , \\(\\left(-\\frac{d}{2}, -\\frac{d}{2\\sqrt{3}}\\right)\\) , and \\(\\left(\\frac{d}{2}, -\\frac{d}{2\\sqrt{3}}\\right)\\) . Total Displacement: [ \\eta_{\\text{total}}(x, y, t) = A \\left( \\frac{\\cos(kr_1 - \\omega t)}{\\sqrt{r_1}} + \\frac{\\cos(kr_2 - \\omega t)}{\\sqrt{r_2}} + \\frac{\\cos(kr_3 - \\omega t)}{\\sqrt{r_3}} \\right) ] Interference Pattern: Expect a symmetric pattern with regions of constructive interference (where path differences are multiples of \\(\\lambda\\) ) and destructive interference (where path differences are odd multiples of \\(\\lambda/2\\) ). DELIVERABLES 2. A detailed explanation of the interference patterns observed for the chosen regular polygon with the goal of understanding wave superposition. ### Interference Patterns in a Regular Polygonal Wave Source Arrangement Interference patterns arise from the superposition of waves originating from multiple sources. When waves meet, their amplitudes combine according to the principle of superposition, creating regions of constructive interference (where waves reinforce each other) and destructive interference (where waves cancel each other out). The specific arrangement of sources influences the resulting pattern significantly. 1. Wave Sources Arranged in a Regular Polygon Consider a set of wave sources positioned at the vertices of a regular \\( n \\) -sided polygon, such as a triangle, square, pentagon, or hexagon. Each vertex acts as a point source emitting circular wavefronts that propagate outward. The interference pattern observed depends on the symmetry and spacing of these sources. 2. Constructive and Destructive Interference Constructive Interference: This occurs at points where the path difference between waves from different sources is an integer multiple of the wavelength ( \\( m\\lambda \\) , where \\( m \\) is an integer). Such points appear as bright or high-intensity regions. Destructive Interference: This happens where the path difference is a half-integer multiple of the wavelength ( \\( (m + 0.5)\\lambda \\) ), leading to cancellation of wave amplitudes. These regions appear as dark or low-intensity zones. 3. Symmetric Interference Patterns Triangle (Equilateral): Produces a threefold rotational symmetry in the interference pattern, forming a repeating set of high-intensity nodes at specific radial distances. Square: Interference fringes align along the symmetry axes, creating a checkerboard-like arrangement of constructive and destructive interference regions. Pentagon and Higher Polygons: As the number of sources increases, the pattern becomes increasingly intricate, with radial symmetry intensifying at the center and forming concentric nodal structures. 4. Wavelength and Source Spacing Effects If the wavelength is large relative to the polygon size, only a few interference fringes form, appearing as broad intensity variations. If the wavelength is small, intricate interference patterns emerge with fine spacing between constructive and destructive zones. 5. Application in Wave Physics Understanding such interference patterns is fundamental in wave optics, acoustics, and quantum mechanics. These principles are used in diffraction gratings, antenna arrays, and even quantum wavefunctions. 3. Graphical representations of the water surface showing constructive and destructive interference regions.","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#task1","text":"","title":"# TASK1"},{"location":"1%20Physics/3%20Waves/Problem_1/#task-recap","text":"We need to analyze the interference patterns on a water surface due to waves emitted from point sources placed at the vertices of a regular polygon. The wave from each source is described by the Single Disturbance equation: \\[ \\eta(x, y, t) = \\frac{A}{\\sqrt{r}} \\cdot \\cos(kr - \\omega t + \\phi) \\] Where: - \\(\\eta(x, y, t)\\) : Displacement of the water surface at point \\((x, y)\\) at time \\(t\\) , - \\(A\\) : Amplitude of the wave, - \\(k = \\frac{2\\pi}{\\lambda}\\) : Wave number (related to wavelength \\(\\lambda\\) ), - \\(\\omega = 2\\pi f\\) : Angular frequency (related to frequency \\(f\\) ), - \\(r = \\sqrt{(x - x_0)^2 + (y - y_0)^2}\\) : Distance from the source at \\((x_0, y_0)\\) to the point \\((x, y)\\) , - \\(\\phi\\) : Initial phase.","title":"Task Recap:"},{"location":"1%20Physics/3%20Waves/Problem_1/#step-1-select-a-regular-polygon","text":"Let\u2019s choose a simple regular polygon to keep things manageable: an equilateral triangle . It has 3 vertices, which means we\u2019ll have 3 point sources. This is a good starting point to observe interference patterns without overcomplicating the math.","title":"Step 1: Select a Regular Polygon"},{"location":"1%20Physics/3%20Waves/Problem_1/#step-2-position-the-sources","text":"Place the equilateral triangle in the \\(xy\\) -plane, centered at the origin for simplicity. Let the side length of the triangle be \\(d\\) . The vertices of an equilateral triangle can be positioned as follows (using basic geometry): Vertex 1: \\((x_1, y_1) = (0, \\frac{d}{\\sqrt{3}})\\) (top vertex), Vertex 2: \\((x_2, y_2) = \\left(-\\frac{d}{2}, -\\frac{d}{2\\sqrt{3}}\\right)\\) (bottom-left vertex), Vertex 3: \\((x_3, y_3) = \\left(\\frac{d}{2}, -\\frac{d}{2\\sqrt{3}}\\right)\\) (bottom-right vertex). These coordinates ensure the triangle is equilateral and centered at the origin (the centroid of the triangle is at \\((0, 0)\\) ).","title":"Step 2: Position the Sources"},{"location":"1%20Physics/3%20Waves/Problem_1/#step-3-wave-equations","text":"Each source emits a circular wave described by the given equation. Let\u2019s assume the waves have the same amplitude \\(A\\) , wave number \\(k\\) , angular frequency \\(\\omega\\) , and initial phase \\(\\phi = 0\\) (for simplicity, unless specified otherwise). The wave from each source at a point \\((x, y)\\) on the water surface.","title":"Step 3: Wave Equations"},{"location":"1%20Physics/3%20Waves/Problem_1/#step-4-superposition-of-waves","text":"The principle of superposition states that the total displacement at a point \\((x, y)\\) is the sum of the displacements from each wave: \\[ \\eta_{\\text{total}}(x, y, t) = \\eta_1(x, y, t) + \\eta_2(x, y, t) + \\eta_3(x, y, t) \\] Substitute the wave equations: \\[ \\eta_{\\text{total}}(x, y, t) = \\frac{A}{\\sqrt{r_1}} \\cos(kr_1 - \\omega t) + \\frac{A}{\\sqrt{r_2}} \\cos(kr_2 - \\omega t) + \\frac{A}{\\sqrt{r_3}} \\cos(kr_3 - \\omega t) \\] Factor out common terms: \\[ \\eta_{\\text{total}}(x, y, t) = A \\left( \\frac{\\cos(kr_1 - \\omega t)}{\\sqrt{r_1}} + \\frac{\\cos(kr_2 - \\omega t)}{\\sqrt{r_2}} + \\frac{\\cos(kr_3 - \\omega t)}{\\sqrt{r_3}} \\right) \\]","title":"Step 4: Superposition of Waves"},{"location":"1%20Physics/3%20Waves/Problem_1/#step-5-analyze-the-interference-pattern-simplified","text":"To analyze the interference pattern, we need to look for points where the waves interfere constructively (amplitudes add up) or destructively (amplitudes cancel out). This equation is complex to solve analytically for all points \\((x, y)\\) , but we can make some observations: Constructive Interference: Occurs when the phase difference between waves is a multiple of \\(2\\pi\\) , i.e., \\(k(r_i - r_j) = 2\\pi m\\) (where \\(m\\) is an integer). This happens when the path difference \\(|r_i - r_j|\\) is a multiple of the wavelength \\(\\lambda\\) : \\[ |r_i - r_j| = m\\lambda \\quad \\text{(since \\(k = \\frac{2\\pi}{\\lambda}\\), so \\(k|r_i - r_j| = \\frac{2\\pi}{\\lambda} |r_i - r_j| = 2\\pi m\\))}. \\] Destructive Interference: Occurs when the phase difference is an odd multiple of \\(\\pi\\) , i.e., \\(k(r_i - r_j) = (2m+1)\\pi\\) , or: \\[ |r_i - r_j| = (m + \\frac{1}{2})\\lambda. \\] Pattern Description: For three sources in an equilateral triangle, the interference pattern will be symmetric around the center. You\u2019ll see regions of high amplitude (constructive interference) where the waves from all three sources are in phase, and regions of low amplitude (destructive interference) where they cancel out. The \\(\\frac{A}{\\sqrt{r}}\\) term means the amplitude decreases with distance, so the pattern will be more pronounced closer to the sources.","title":"Step 5: Analyze the Interference Pattern (Simplified)"},{"location":"1%20Physics/3%20Waves/Problem_1/#simple-solution-summary","text":"Polygon Chosen: Equilateral triangle with side length \\(d\\) . Source Positions: Vertices at \\((0, \\frac{d}{\\sqrt{3}})\\) , \\(\\left(-\\frac{d}{2}, -\\frac{d}{2\\sqrt{3}}\\right)\\) , and \\(\\left(\\frac{d}{2}, -\\frac{d}{2\\sqrt{3}}\\right)\\) . Total Displacement: [ \\eta_{\\text{total}}(x, y, t) = A \\left( \\frac{\\cos(kr_1 - \\omega t)}{\\sqrt{r_1}} + \\frac{\\cos(kr_2 - \\omega t)}{\\sqrt{r_2}} + \\frac{\\cos(kr_3 - \\omega t)}{\\sqrt{r_3}} \\right) ] Interference Pattern: Expect a symmetric pattern with regions of constructive interference (where path differences are multiples of \\(\\lambda\\) ) and destructive interference (where path differences are odd multiples of \\(\\lambda/2\\) ).","title":"Simple Solution Summary:"},{"location":"1%20Physics/3%20Waves/Problem_1/#deliverables","text":"","title":"DELIVERABLES"},{"location":"1%20Physics/3%20Waves/Problem_1/#2","text":"A detailed explanation of the interference patterns observed for the chosen regular polygon with the goal of understanding wave superposition. ### Interference Patterns in a Regular Polygonal Wave Source Arrangement Interference patterns arise from the superposition of waves originating from multiple sources. When waves meet, their amplitudes combine according to the principle of superposition, creating regions of constructive interference (where waves reinforce each other) and destructive interference (where waves cancel each other out). The specific arrangement of sources influences the resulting pattern significantly.","title":"2."},{"location":"1%20Physics/3%20Waves/Problem_1/#1-wave-sources-arranged-in-a-regular-polygon","text":"Consider a set of wave sources positioned at the vertices of a regular \\( n \\) -sided polygon, such as a triangle, square, pentagon, or hexagon. Each vertex acts as a point source emitting circular wavefronts that propagate outward. The interference pattern observed depends on the symmetry and spacing of these sources.","title":"1. Wave Sources Arranged in a Regular Polygon"},{"location":"1%20Physics/3%20Waves/Problem_1/#2-constructive-and-destructive-interference","text":"Constructive Interference: This occurs at points where the path difference between waves from different sources is an integer multiple of the wavelength ( \\( m\\lambda \\) , where \\( m \\) is an integer). Such points appear as bright or high-intensity regions. Destructive Interference: This happens where the path difference is a half-integer multiple of the wavelength ( \\( (m + 0.5)\\lambda \\) ), leading to cancellation of wave amplitudes. These regions appear as dark or low-intensity zones.","title":"2. Constructive and Destructive Interference"},{"location":"1%20Physics/3%20Waves/Problem_1/#3-symmetric-interference-patterns","text":"Triangle (Equilateral): Produces a threefold rotational symmetry in the interference pattern, forming a repeating set of high-intensity nodes at specific radial distances. Square: Interference fringes align along the symmetry axes, creating a checkerboard-like arrangement of constructive and destructive interference regions. Pentagon and Higher Polygons: As the number of sources increases, the pattern becomes increasingly intricate, with radial symmetry intensifying at the center and forming concentric nodal structures.","title":"3. Symmetric Interference Patterns"},{"location":"1%20Physics/3%20Waves/Problem_1/#4-wavelength-and-source-spacing-effects","text":"If the wavelength is large relative to the polygon size, only a few interference fringes form, appearing as broad intensity variations. If the wavelength is small, intricate interference patterns emerge with fine spacing between constructive and destructive zones.","title":"4. Wavelength and Source Spacing Effects"},{"location":"1%20Physics/3%20Waves/Problem_1/#5-application-in-wave-physics","text":"Understanding such interference patterns is fundamental in wave optics, acoustics, and quantum mechanics. These principles are used in diffraction gratings, antenna arrays, and even quantum wavefunctions.","title":"5. Application in Wave Physics"},{"location":"1%20Physics/3%20Waves/Problem_1/#3","text":"Graphical representations of the water surface showing constructive and destructive interference regions.","title":"3."},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1 1 Exploration of Applications:** # Particle Accelerators: Use magnetic fields to bend charged particles into circular paths and electric fields to accelerate them, enabling high-energy particle physics research. # Mass Spectrometers: Separate ions by mass-to-charge ratio using magnetic fields that create different curved trajectories. # Plasma Confinement: Contain hot plasma in fusion reactors using magnetic fields that keep charged particles away from reactor walls. # Hall Effect Thrusters: Spacecraft propulsion systems using crossed electric and magnetic fields to accelerate ions. # Cyclotrons and Synchrotrons: Medical and research devices that accelerate particles in spiral or circular paths. # MRI Machines: Use strong magnetic fields to align protons in the body and radio frequency pulses to create diagnostic images. # Relevance of electric (E) and magnetic (B) fields: Electric fields provide direct acceleration of charged particles along field lines, controlling their energy. Magnetic fields create perpendicular forces to particle velocity, controlling particle direction without changing energy directly. Together, they enable precise control of: Particle trajectories Confinement boundaries Energy levels Beam focusing Sorting particles by properties This control makes possible technologies from cancer treatments to space propulsion systems. The simulation of particle motion Parameter exploration: , , , Visualization: ,","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#1-exploration-of-applications","text":"# Particle Accelerators: Use magnetic fields to bend charged particles into circular paths and electric fields to accelerate them, enabling high-energy particle physics research. # Mass Spectrometers: Separate ions by mass-to-charge ratio using magnetic fields that create different curved trajectories. # Plasma Confinement: Contain hot plasma in fusion reactors using magnetic fields that keep charged particles away from reactor walls. # Hall Effect Thrusters: Spacecraft propulsion systems using crossed electric and magnetic fields to accelerate ions. # Cyclotrons and Synchrotrons: Medical and research devices that accelerate particles in spiral or circular paths. # MRI Machines: Use strong magnetic fields to align protons in the body and radio frequency pulses to create diagnostic images. # Relevance of electric (E) and magnetic (B) fields: Electric fields provide direct acceleration of charged particles along field lines, controlling their energy. Magnetic fields create perpendicular forces to particle velocity, controlling particle direction without changing energy directly. Together, they enable precise control of: Particle trajectories Confinement boundaries Energy levels Beam focusing Sorting particles by properties This control makes possible technologies from cancer treatments to space propulsion systems.","title":"1 Exploration of Applications:**"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#the-simulation-of-particle-motion","text":"","title":"The simulation of particle motion"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#parameter-exploration","text":", , ,","title":"Parameter exploration:"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#visualization","text":",","title":"Visualization:"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1 ### Algorithm Description The algorithm takes a circuit as a graph (nodes are junctions, edges are resistors with weights) and finds the equivalent resistance between a source node (S) and sink node (T). It: *Identifies parallel connections *: Multiple edges between two nodes are combined using \\( \\frac{1}{R_{\\text{eq}}} = \\frac{1}{R_1} + \\frac{1}{R_2} + \\dots \\) . *Identifies series connections *: Two edges sharing a node with only two connections are combined by adding their resistances ( \\( R_{\\text{eq}} = R_1 + R_2 \\) ). ** Iteratively reduces :** Repeats until only one edge remains between S and T. Nested combinations (e.g., series within parallel) are handled by reducing step-by-step\u2014each iteration simplifies the graph, revealing new series or parallel opportunities. Pseudocode Algorithm CalculateEquivalentResistance(Graph G, Node S, Node T) while G has more than 2 nodes OR more than 1 edge between S and T // Parallel reduction for each pair of nodes (u, v) in G if multiple edges between u and v R_eq = 1 / (sum of 1/R for each edge) Replace all edges (u, v) with one edge of weight R_eq // Series reduction for each node n in G (not S or T) if degree(n) == 2 u, v = neighbors of n R_eq = weight(u, n) + weight(n, v) Remove n and its edges Add edge (u, v) with weight R_eq return weight of edge (S, T) ### Example Walkthrough: Equivalent Resistance Calculation Circuit Description Nodes : S, A, B, T Edges (Resistors) : S\u2013A: 2 ohms A\u2013B: 4 ohms A\u2013T: 8 ohms B\u2013T: 6 ohms Goal : Find the equivalent resistance between S and T. Initial Graph S --(2)-- A --(4)-- B --(6)-- T | (8) | T Algorithm Steps We\u2019ll use the algorithm to iteratively reduce the graph by identifying series and parallel connections until only S and T remain with one edge. Step 1: Check for Parallel Connections Look at node pairs : S\u2013A: 1 edge (2 ohms) A\u2013B: 1 edge (4 ohms) B\u2013T: 1 edge (6 ohms) A\u2013T: 1 edge (8 ohms) Result : No parallel edges (no multiple edges between any pair). Graph unchanged : S --(2)-- A --(4)-- B --(6)-- T | (8) | T Step 2: Check for Series Connections Look at nodes (excluding S and T) : Node A: Degree 3 (S, B, T) \u2013 not series. Node B: Degree 2 (A, T) \u2013 series candidate! Reduce series at B : Edges: A\u2013B (4 ohms), B\u2013T (6 ohms) Formula: \\( R_{\\text{eq}} = 4 + 6 = 10 \\) ohms Remove B and edges A\u2013B, B\u2013T; add edge A\u2013T (10 ohms). Updated Graph : S --(2)-- A --(10)-- T | (8) | T Step 3: Check for Parallel Connections Look at node pairs : S\u2013A: 1 edge (2 ohms) A\u2013T: 2 edges (10 ohms, 8 ohms) \u2013 parallel! Reduce parallel at A\u2013T : Formula: \\( \\frac{1}{R_{\\text{eq}}} = \\frac{1}{10} + \\frac{1}{8} = 0.1 + 0.125 = 0.225 \\) \\( R_{\\text{eq}} = \\frac{1}{0.225} \\approx 4.44 \\) ohms Replace A\u2013T (10 ohms and 8 ohms) with A\u2013T (4.44 ohms). Updated Graph : S --(2)-- A --(4.44)-- T Step 4: Check for Series Connections Look at nodes : Node A: Degree 2 (S, T) \u2013 series! Reduce series at A : Edges: S\u2013A (2 ohms), A\u2013T (4.44 ohms) Formula: \\( R_{\\text{eq}} = 2 + 4.44 = 6.44 \\) ohms Remove A and edges S\u2013A, A\u2013T; add edge S\u2013T (6.44 ohms). Final Graph : S --(6.44)-- T Result Equivalent Resistance : 6.44 ohms between S and T. How the Algorithm Handles Nested Combinations The algorithm handles nested combinations\u2014like parallel resistors within a series chain\u2014by reducing the graph layer by layer. * In this example:* Nested Structure: Initially, A\u2013B (4 ohms) and B\u2013T (6 ohms) form a series chain, while A\u2013T (8 ohms) is a parallel path. This is a series-parallel mix. Layer-by-Layer Reduction: First pass: The series A\u2013B\u2013T (4 + 6 = 10 ohms) simplifies, adding a new A\u2013T edge. Second pass: This creates a parallel combination with the existing A\u2013T (8 ohms), reduced to 4.44 ohms. Final pass: The result (4.44 ohms) is in series with S\u2013A (2 ohms), yielding 6.44 ohms.","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#algorithm-description","text":"The algorithm takes a circuit as a graph (nodes are junctions, edges are resistors with weights) and finds the equivalent resistance between a source node (S) and sink node (T). It: *Identifies parallel connections *: Multiple edges between two nodes are combined using \\( \\frac{1}{R_{\\text{eq}}} = \\frac{1}{R_1} + \\frac{1}{R_2} + \\dots \\) . *Identifies series connections *: Two edges sharing a node with only two connections are combined by adding their resistances ( \\( R_{\\text{eq}} = R_1 + R_2 \\) ). ** Iteratively reduces :** Repeats until only one edge remains between S and T. Nested combinations (e.g., series within parallel) are handled by reducing step-by-step\u2014each iteration simplifies the graph, revealing new series or parallel opportunities.","title":"### Algorithm Description"},{"location":"1%20Physics/5%20Circuits/Problem_1/#pseudocode","text":"Algorithm CalculateEquivalentResistance(Graph G, Node S, Node T) while G has more than 2 nodes OR more than 1 edge between S and T // Parallel reduction for each pair of nodes (u, v) in G if multiple edges between u and v R_eq = 1 / (sum of 1/R for each edge) Replace all edges (u, v) with one edge of weight R_eq // Series reduction for each node n in G (not S or T) if degree(n) == 2 u, v = neighbors of n R_eq = weight(u, n) + weight(n, v) Remove n and its edges Add edge (u, v) with weight R_eq return weight of edge (S, T)","title":"Pseudocode"},{"location":"1%20Physics/5%20Circuits/Problem_1/#example-walkthrough-equivalent-resistance-calculation","text":"","title":"### Example Walkthrough: Equivalent Resistance Calculation"},{"location":"1%20Physics/5%20Circuits/Problem_1/#circuit-description","text":"Nodes : S, A, B, T Edges (Resistors) : S\u2013A: 2 ohms A\u2013B: 4 ohms A\u2013T: 8 ohms B\u2013T: 6 ohms Goal : Find the equivalent resistance between S and T.","title":"Circuit Description"},{"location":"1%20Physics/5%20Circuits/Problem_1/#initial-graph","text":"S --(2)-- A --(4)-- B --(6)-- T | (8) | T","title":"Initial Graph"},{"location":"1%20Physics/5%20Circuits/Problem_1/#algorithm-steps","text":"We\u2019ll use the algorithm to iteratively reduce the graph by identifying series and parallel connections until only S and T remain with one edge.","title":"Algorithm Steps"},{"location":"1%20Physics/5%20Circuits/Problem_1/#step-1-check-for-parallel-connections","text":"Look at node pairs : S\u2013A: 1 edge (2 ohms) A\u2013B: 1 edge (4 ohms) B\u2013T: 1 edge (6 ohms) A\u2013T: 1 edge (8 ohms) Result : No parallel edges (no multiple edges between any pair). Graph unchanged : S --(2)-- A --(4)-- B --(6)-- T | (8) | T","title":"Step 1: Check for Parallel Connections"},{"location":"1%20Physics/5%20Circuits/Problem_1/#step-2-check-for-series-connections","text":"Look at nodes (excluding S and T) : Node A: Degree 3 (S, B, T) \u2013 not series. Node B: Degree 2 (A, T) \u2013 series candidate! Reduce series at B : Edges: A\u2013B (4 ohms), B\u2013T (6 ohms) Formula: \\( R_{\\text{eq}} = 4 + 6 = 10 \\) ohms Remove B and edges A\u2013B, B\u2013T; add edge A\u2013T (10 ohms). Updated Graph : S --(2)-- A --(10)-- T | (8) | T","title":"Step 2: Check for Series Connections"},{"location":"1%20Physics/5%20Circuits/Problem_1/#step-3-check-for-parallel-connections","text":"Look at node pairs : S\u2013A: 1 edge (2 ohms) A\u2013T: 2 edges (10 ohms, 8 ohms) \u2013 parallel! Reduce parallel at A\u2013T : Formula: \\( \\frac{1}{R_{\\text{eq}}} = \\frac{1}{10} + \\frac{1}{8} = 0.1 + 0.125 = 0.225 \\) \\( R_{\\text{eq}} = \\frac{1}{0.225} \\approx 4.44 \\) ohms Replace A\u2013T (10 ohms and 8 ohms) with A\u2013T (4.44 ohms). Updated Graph : S --(2)-- A --(4.44)-- T","title":"Step 3: Check for Parallel Connections"},{"location":"1%20Physics/5%20Circuits/Problem_1/#step-4-check-for-series-connections","text":"Look at nodes : Node A: Degree 2 (S, T) \u2013 series! Reduce series at A : Edges: S\u2013A (2 ohms), A\u2013T (4.44 ohms) Formula: \\( R_{\\text{eq}} = 2 + 4.44 = 6.44 \\) ohms Remove A and edges S\u2013A, A\u2013T; add edge S\u2013T (6.44 ohms). Final Graph : S --(6.44)-- T","title":"Step 4: Check for Series Connections"},{"location":"1%20Physics/5%20Circuits/Problem_1/#result","text":"Equivalent Resistance : 6.44 ohms between S and T.","title":"Result"},{"location":"1%20Physics/5%20Circuits/Problem_1/#how-the-algorithm-handles-nested-combinations","text":"The algorithm handles nested combinations\u2014like parallel resistors within a series chain\u2014by reducing the graph layer by layer.","title":"How the Algorithm Handles Nested Combinations"},{"location":"1%20Physics/5%20Circuits/Problem_1/#in-this-example","text":"Nested Structure: Initially, A\u2013B (4 ohms) and B\u2013T (6 ohms) form a series chain, while A\u2013T (8 ohms) is a parallel path. This is a series-parallel mix. Layer-by-Layer Reduction: First pass: The series A\u2013B\u2013T (4 + 6 = 10 ohms) simplifies, adding a new A\u2013T edge. Second pass: This creates a parallel combination with the existing A\u2013T (8 ohms), reduced to 4.44 ohms. Final pass: The result (4.44 ohms) is in series with S\u2013A (2 ohms), yielding 6.44 ohms.","title":"* In this example:*"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"2%20Mathematics/1%20Linear_algebra/","text":"Linear Algebra","title":"Linear Algebra"},{"location":"2%20Mathematics/1%20Linear_algebra/#linear-algebra","text":"","title":"Linear Algebra"},{"location":"2%20Mathematics/2%20Analytic_geometry/","text":"Analytic geometry","title":"Analytic geometry"},{"location":"2%20Mathematics/2%20Analytic_geometry/#analytic-geometry","text":"","title":"Analytic geometry"},{"location":"2%20Mathematics/3%20Calculus/","text":"Calculus","title":"Calculus"},{"location":"2%20Mathematics/3%20Calculus/#calculus","text":"","title":"Calculus"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/","text":"Set Theory","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/#set-theory","text":"","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/","text":"Relations","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/#relations","text":"","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/","text":"Functions","title":"Functions"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/#functions","text":"","title":"Functions"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/","text":"Combinatorics","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/#combinatorics","text":"","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/","text":"Number Theory","title":"Number Theory"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/#number-theory","text":"","title":"Number Theory"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/","text":"Sequences and Series","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/#sequences-and-series","text":"","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/","text":"Induction","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/#induction","text":"","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/","text":"Recurrence","title":"Recurrence"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/#recurrence","text":"","title":"Recurrence"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/","text":"Graph Theory","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/#graph-theory","text":"","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/","text":"Logic","title":"Logic"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/#logic","text":"","title":"Logic"}]}